//
//  HomeViewController.swift
//  themovies
//
//  Created by Luis Domingues on 01/05/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: AnyObject {
    func displayFilterOptions(viewModel: Home.MovieGenderFilter.ViewModel)
    func displayClickedPill(viewModel: Home.MovieGenderFilter.ViewModel)
    func displayBanner(viewModel: Home.MovieBanner.ViewModel)
    func displayPopularMovie(viewModel: Home.MovieBanner.ViewModel)
}

struct ContentMovie {
    var isSelected: Bool
    let gender: String
}

class HomeViewController: UIViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var themes: [ContentMovie] = []
    var movies: [DetailedMovie] = []
    var popularMoviesList: [DetailedMovie] = []
    
    // MARK: Layout
    lazy var scrollView: UIScrollView = {
        let sv = UIScrollView()
        sv.translatesAutoresizingMaskIntoConstraints = false
        sv.contentInsetAdjustmentBehavior = .never
        return sv
    }()
    
    lazy var containerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()

    lazy var titlePage: UILabel = {
        let lbl = UILabel()
        lbl.text = "O que vocÃª quer assistir hoje?"
        lbl.numberOfLines = 0
        lbl.font = UIFont.Inter(.bold, size: 28)
        lbl.textColor = .white
        lbl.translatesAutoresizingMaskIntoConstraints = false
        return lbl
    }()
    
    lazy var profileImage: UIImageView = {
        let imageView = UIImageView(frame: CGRect(x: .zero, y: .zero, width: 40, height: 40))
        let image = UIImage(named: "profile_bob")
        imageView.contentMode = .scaleToFill
        imageView.layer.borderWidth = 1.0
        imageView.layer.masksToBounds = false
        imageView.layer.borderColor = UIColor.white.cgColor
        imageView.layer.cornerRadius = imageView.frame.size.height / 2
        imageView.clipsToBounds = true
        imageView.image = image
        imageView.translatesAutoresizingMaskIntoConstraints = false
        
        return imageView
    }()
    
    lazy var textField: UITextField = {
        let tf = UITextField()
        let placeholderText = "Buscar..."
        let placeholderColor = UIColor.lightGray
        let attributes = [NSAttributedString.Key.foregroundColor: placeholderColor]
        let attributedPlaceholder = NSAttributedString(string: placeholderText, attributes: attributes)
        tf.attributedPlaceholder = attributedPlaceholder
        tf.font = UIFont.Inter(.semiBold, size: 16)
        tf.textColor = .white
        tf.borderStyle = UITextField.BorderStyle.roundedRect
        tf.autocorrectionType = UITextAutocorrectionType.no
        tf.keyboardType = UIKeyboardType.default
        tf.returnKeyType = UIReturnKeyType.done
        tf.clearButtonMode = .whileEditing
        tf.tintColor = .gray
        tf.contentVerticalAlignment = UIControl.ContentVerticalAlignment.center
        tf.translatesAutoresizingMaskIntoConstraints = false
        tf.backgroundColor = UIColor(red: 0.21, green: 0.03, blue: 0.42, alpha: 1.00)
        
        let symbolConfig = UIImage.SymbolConfiguration(pointSize: 20, weight: .light)
        let symbolImage = UIImage(systemName: "magnifyingglass", withConfiguration: symbolConfig)?.withTintColor(.gray, renderingMode: .alwaysOriginal)
        let imageView = UIImageView(image: symbolImage)
        tf.leftView = imageView
        tf.leftViewMode = .always
        return tf
    }()
    
    lazy var themePills: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.showsHorizontalScrollIndicator = false
        cv.translatesAutoresizingMaskIntoConstraints = false
        cv.register(ThemePillsCell.self, forCellWithReuseIdentifier: "cell")
        cv.backgroundColor = .clear
        return cv
    }()
    
    lazy var latestLabel: UILabel = {
        let lbl = UILabel()
        lbl.text = "Latest movies"
        lbl.numberOfLines = 0
        lbl.font = UIFont.Inter(.bold, size: 20)
        lbl.textColor = .white
        lbl.translatesAutoresizingMaskIntoConstraints = false
        return lbl
    }()
    
    lazy var movieBanner: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.showsHorizontalScrollIndicator = false
        cv.translatesAutoresizingMaskIntoConstraints = false
        cv.register(MovieBannerCell.self, forCellWithReuseIdentifier: "movie_cell")
        cv.backgroundColor = .clear
        cv.contentInsetAdjustmentBehavior = .never
        return cv
    }()
    
    lazy var popularLabel: UILabel = {
        let lbl = UILabel()
        lbl.text = "Most popular"
        lbl.numberOfLines = 0
        lbl.font = UIFont.Inter(.bold, size: 20)
        lbl.textColor = .white
        lbl.translatesAutoresizingMaskIntoConstraints = false
        return lbl
    }()
    
    lazy var popularMovies: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        let cv = UICollectionView(frame: .zero, collectionViewLayout: layout)
        cv.showsHorizontalScrollIndicator = false
        cv.translatesAutoresizingMaskIntoConstraints = false
        cv.register(MovieBannerCell.self, forCellWithReuseIdentifier: "movie_cell")
        cv.backgroundColor = .clear
        cv.contentInsetAdjustmentBehavior = .never
        return cv
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureView()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        popularMovies.collectionViewLayout.invalidateLayout()
        movieBanner.collectionViewLayout.invalidateLayout()
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
        super.touchesBegan(touches, with: event)
    }
    
    // MARK: Do something
    
    func configureView() {
        interactor?.getMovies()
        interactor?.getPopular()
        themePills.dataSource = self
        themePills.delegate = self
        
        movieBanner.dataSource = self
        movieBanner.delegate = self
        
        popularMovies.dataSource = self
        popularMovies.delegate = self
        
        let gradientLayer = CAGradientLayer()
        gradientLayer.frame = view.bounds
        gradientLayer.colors = [UIColor(red: 0.50, green: 0.00, blue: 1.00, alpha: 1.00).cgColor,
                                UIColor(red: 0.00, green: 0.00, blue: 0.00, alpha: 1.00).cgColor]
        view.layer.addSublayer(gradientLayer)
        self.navigationController?.isNavigationBarHidden = true
        setupLayout()
        interactor?.getMovieThemes()
    }
    
    //MARK: - Display methods
    
    func displayFilterOptions(viewModel: Home.MovieGenderFilter.ViewModel) {
        themes = viewModel.movies
        themePills.reloadData()
    }
    
    func displayClickedPill(viewModel: Home.MovieGenderFilter.ViewModel) {
        themes = viewModel.movies
        themePills.reloadData()
    }
    
    func displayBanner(viewModel: Home.MovieBanner.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            self.movies = viewModel.images.results
            self.movieBanner.reloadData()
        }
    }
    
    func displayPopularMovie(viewModel: Home.MovieBanner.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            self.popularMoviesList = viewModel.images.results
            self.popularMovies.reloadData()
        }
    }
}

extension HomeViewController {
    private func setupLayout() {
        view.addSubview(scrollView)
        scrollView.addSubview(containerView)
        containerView.addSubview(titlePage)
        containerView.addSubview(profileImage)
        containerView.addSubview(textField)
        containerView.addSubview(themePills)
        containerView.addSubview(latestLabel)
        containerView.addSubview(movieBanner)
        containerView.addSubview(popularLabel)
        containerView.addSubview(popularMovies)
        
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.widthAnchor.constraint(equalTo: view.widthAnchor),
            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            
            containerView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            containerView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            containerView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),
            containerView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            containerView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            containerView.heightAnchor.constraint(equalTo: scrollView.frameLayoutGuide.heightAnchor),
            
            titlePage.topAnchor.constraint(equalTo: containerView.safeAreaLayoutGuide.topAnchor, constant: 64),
            titlePage.leadingAnchor.constraint(equalTo: containerView.leadingAnchor, constant: 16),
            
            profileImage.centerYAnchor.constraint(equalTo: titlePage.centerYAnchor),
            profileImage.leadingAnchor.constraint(equalTo: titlePage.trailingAnchor, constant: 56),
            profileImage.trailingAnchor.constraint(equalTo: containerView.trailingAnchor, constant: -16),
            profileImage.heightAnchor.constraint(equalToConstant: 40),
            profileImage.widthAnchor.constraint(equalToConstant: 40),
            
            textField.topAnchor.constraint(equalTo: titlePage.bottomAnchor, constant: 28),
            textField.trailingAnchor.constraint(equalTo: profileImage.trailingAnchor),
            textField.leadingAnchor.constraint(equalTo: titlePage.leadingAnchor),
            
            themePills.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 16),
            themePills.trailingAnchor.constraint(equalTo: textField.trailingAnchor),
            themePills.leadingAnchor.constraint(equalTo: textField.leadingAnchor),
            themePills.heightAnchor.constraint(equalToConstant: 30),
            
            latestLabel.topAnchor.constraint(equalTo: themePills.bottomAnchor, constant: 20),
            latestLabel.trailingAnchor.constraint(equalTo: themePills.trailingAnchor),
            latestLabel.leadingAnchor.constraint(equalTo: themePills.leadingAnchor),
            
            movieBanner.topAnchor.constraint(equalTo: latestLabel.bottomAnchor, constant: 16),
            movieBanner.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            movieBanner.leadingAnchor.constraint(equalTo: latestLabel.leadingAnchor),
            movieBanner.heightAnchor.constraint(equalToConstant: view.frame.height / 4),
            
            popularLabel.topAnchor.constraint(equalTo: movieBanner.bottomAnchor, constant: 16),
            popularLabel.trailingAnchor.constraint(equalTo: textField.trailingAnchor),
            popularLabel.leadingAnchor.constraint(equalTo: textField.leadingAnchor),
            
            popularMovies.topAnchor.constraint(equalTo: popularLabel.bottomAnchor, constant: 16),
            popularMovies.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),
            popularMovies.bottomAnchor.constraint(lessThanOrEqualTo: containerView.bottomAnchor, constant: -16),
            popularMovies.leadingAnchor.constraint(equalTo: popularLabel.leadingAnchor),
            popularMovies.heightAnchor.constraint(equalToConstant: view.frame.height / 4),
        ])
    }
}

extension HomeViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        if collectionView == themePills {
            return CGSize(width: themes[indexPath.item].gender.size(withAttributes: [NSAttributedString.Key.font : UIFont.Inter(.semiBold, size: 16)]).width + 33, height: 30)
        } else {
            return CGSize(width: 124, height: 188)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return .zero
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == themePills {
            return themes.count
        } else if collectionView == movieBanner {
            return movies.count
        } else {
            return popularMoviesList.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == themePills {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as? ThemePillsCell else { return UICollectionViewCell() }
            cell.layer.cornerRadius = cell.frame.height / 2
            cell.layer.masksToBounds = true
            cell.setupCell(content: themes[indexPath.row])
            
            return cell
        } else {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "movie_cell", for: indexPath) as? MovieBannerCell else { return UICollectionViewCell() }
            let isPopular = collectionView == popularMovies
            let movie = isPopular ? popularMoviesList[indexPath.row] : movies[indexPath.row]
            if cell.movieImage.image == nil {
                cell.setupCell(content: movie.poster, title: movie.title)
            }
            return cell
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == themePills {
            interactor?.changeSelectedItem(request: Home.MovieGenderFilter.Request(indexClicked: indexPath.row))
        }
    }
}
